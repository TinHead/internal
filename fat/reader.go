package fat

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"io"
	"strings"
)

// Reader is a minimalistic FAT16B reader, which only aims to be
// compatible with file systems created by Writer.
type Reader struct {
	r                 io.ReadSeeker
	sectorSize        uint16
	sectorsPerCluster uint8
	reservedSectors   uint16
	rootDirEntries    uint16
	fatSectors        uint16
}

// NewReader creates a new FAT16B Reader by reading file system
// metadata.
func NewReader(r io.ReadSeeker) (*Reader, error) {
	rd := &Reader{
		r: r,
	}

	// Skip jumpCode and OEM
	if _, err := r.Seek(3+8, io.SeekStart); err != nil {
		return nil, err
	}

	if err := binary.Read(r, binary.LittleEndian, &rd.sectorSize); err != nil {
		return nil, err
	}

	if err := binary.Read(r, binary.LittleEndian, &rd.sectorsPerCluster); err != nil {
		return nil, err
	}

	if err := binary.Read(r, binary.LittleEndian, &rd.reservedSectors); err != nil {
		return nil, err
	}

	// Skip number of FAT copies
	if _, err := r.Seek(1, io.SeekCurrent); err != nil {
		return nil, err
	}

	if err := binary.Read(r, binary.LittleEndian, &rd.rootDirEntries); err != nil {
		return nil, err
	}

	// Skip number of sectors and media type
	if _, err := r.Seek(2+1, io.SeekCurrent); err != nil {
		return nil, err
	}

	if err := binary.Read(r, binary.LittleEndian, &rd.fatSectors); err != nil {
		return nil, err
	}

	return rd, nil
}

func (r *Reader) fullSectors(bytes int64) int64 {
	sectorSize := int64(r.sectorSize)
	clusters := bytes / sectorSize
	if bytes%sectorSize > 0 {
		clusters++
	}
	return clusters
}

type dirEntry struct {
	name         [8]byte
	ext          [3]byte
	size         uint32
	firstCluster uint16
}

// Extents returns the offset and length of the file identified by path.
//
// This function is useful only on FAT file systems where all files
// are stored un-fragmented, such as file systems generated by Writer.
//
// TODO: implement support for subdirectories
func (r *Reader) Extents(path string) (offset int64, length int64, err error) {
	dirOffset := int64((r.reservedSectors + r.fatSectors)) * int64(r.sectorSize)
	dataOffset := dirOffset + r.fullSectors(int64(r.rootDirEntries)*32)*int64(r.sectorSize)

	numDirEntries := int(r.rootDirEntries)

	components := strings.Split(path[1:], "/")
	for _, component := range components {
		for i := 0; i < numDirEntries; i++ {
			if _, err := r.r.Seek(dirOffset+int64(i*32), io.SeekStart); err != nil {
				return 0, 0, err
			}

			var entry dirEntry

			if _, err := r.r.Read(entry.name[:]); err != nil {
				return 0, 0, err
			}

			// unused slot
			if entry.name[0] == 0 {
				continue
			}

			if _, err := r.r.Read(entry.ext[:]); err != nil {
				return 0, 0, err
			}

			var name string
			if idx := bytes.IndexByte(entry.name[:], ' '); idx > -1 {
				name = string(entry.name[:idx])
			} else {
				name = string(entry.name[:])
			}
			if entry.ext[0] != ' ' {
				name += "." + string(entry.ext[:])
			}

			if name != component {
				continue
			}

			if _, err := r.r.Seek(dirOffset+int64(i*32+26), io.SeekStart); err != nil {
				return 0, 0, err
			}

			if err := binary.Read(r.r, binary.LittleEndian, &entry.firstCluster); err != nil {
				return 0, 0, err
			}

			if err := binary.Read(r.r, binary.LittleEndian, &entry.size); err != nil {
				return 0, 0, err
			}

			return dataOffset + int64(entry.firstCluster-2)*int64(r.sectorsPerCluster)*int64(r.sectorSize), int64(entry.size), nil
		}
	}

	return 0, 0, fmt.Errorf("%q not found", path)
}
